project (diy2_dlb_kd)
cmake_minimum_required (VERSION 2.8.12)

option (WITH_PROTOBUF ON)
option (WITH_NETCDF "Build with NetCDF" OFF)
option (WITH_PNETCDF "Build with parallel-netcdf" ON)
option (WITH_QT "Build with Qt" OFF)
option (WITH_CXX11 "Build with C++11" ON)

set (CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake-modules)

if (APPLE)
  set (CMAKE_MACOSX_RPATH ON)
  set (CMAKE_SKIP_BUILD_RPATH FALSE)
  set (CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
  set (CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
  set (CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
  list (FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES
    "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
  if ("${isSystemDir}" STREQUAL "-1")
    set (CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
  endif ()
endif ()

# C++11/Boost
if (WITH_CXX11)
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
  elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
  endif ()
else ()
  find_package (Boost REQUIRED COMPONENTS thread system program_options)
  include_directories (${Boost_INCLUDE_DIR})
endif ()

set (CMAKE_INCLUDE_CURRENT_DIR ON)
set (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
set (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})
set (CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})

set (PNETCDF_DIR "/nfs/proj-tpeterka/jiang/opt/pnetcdf-1.7.0")
set (PNETCDF_INCLUDE_DIR ${PNETCDF_DIR}/include)
set (PNETCDF_LIBRARY ${PNETCDF_DIR}/lib/libpnetcdf.a)
include_directories (${PNETCDF_INCLUDE_DIR})

set (DIY2_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/diy2/include)
include_directories (${DIY2_INCLUDE_DIR})

set (METIS_DIR "/nfs/proj-tpeterka/jiang/opt/parmetis-4.0.3")
set (METIS_INCLUDE_DIR ${METIS_DIR}/include)
set (METIS_LIBRARY ${METIS_DIR}/lib/libmetis.a)
include_directories (${METIS_INCLUDE_DIR})

set (PARMETIS_DIR "/nfs/proj-tpeterka/jiang/opt/parmetis-4.0.3")
set (PARMETIS_INCLUDE_DIR ${PARMETIS_DIR}/include)
#set (PARMETIS_LIBRARY ${PARMETIS_DIR}/lib/libmetis.a)
set (PARMETIS_LIBRARY ${PARMETIS_DIR}/lib/libparmetis.a)
include_directories (${PARMETIS_INCLUDE_DIR})

set (ZOLTAN_DIR "/nfs/proj-tpeterka/jiang/opt/zoltan-3.83")
set (ZOLTAN_INCLUDE_DIR ${ZOLTAN_DIR}/include)
set (ZOLTAN_LIBRARY ${ZOLTAN_DIR}/lib/libzoltan.a)
include_directories (${ZOLTAN_INCLUDE_DIR})

find_package (MPI REQUIRED)
find_package (NetCDF REQUIRED)
find_package (Protobuf REQUIRED)

#set (BOOST_DIR "/nfs/proj-tpeterka/jiang/opt/boost_1_61_0")
#set (BOOST_INCLUDE_DIR ${BOOST_DIR}/include)
#set (BOOST_LIBRARY ${BOOST_DIR}/lib)
#find_package (Boost REQUIRED COMPONENTS thread system)
#include_directories (${BOOST_INCLUDE_DIR})

set (Boost_USE_STATIC_LIBS ON)
set (Boost_USE_MULTITHREADED ON)
set (Boost_USE_STATIC_RUNTIME OFF)
find_package (Boost REQUIRED COMPONENTS thread system atomic program_options)
include_directories (${Boost_INCLUDE_DIR})

include_directories (
  ${PROTOBUF_INCLUDE_DIR}
  ${MPI_INCLUDE_PATH}
  ${NetCDF_INCLUDE_DIR}
  ${PROJECT_BINARY_DIR}
  ${PROJECT_SOURCE_DIR}
)

link_directories(
  #${BOOST_LIBRARY}
)

add_subdirectory (tinyxml)
add_subdirectory (bil)
add_subdirectory (partitioner)
add_subdirectory (common)
add_subdirectory (async)
add_subdirectory (src)
add_subdirectory (baseline)
add_subdirectory (apps)
